import tkinter as tk
from tkinter import messagebox, simpledialog, Menu
import webbrowser
from movie_app_api import MovieApp


class MovieAppTkGui:
    """
    The Tkinter GUI class for the Movie App. It integrates with the MovieApp
    and provides a user interface for managing and viewing movies.
    """
    def __init__(self, root, movie_app):
        """
        Initialize the Tkinter GUI and integrate with the MovieApp.
        
        Args:
            root (tk.Tk): The main Tkinter window.
            movie_app (MoVieApp): The instance of the MovieApp class that manages the movies.
        """
        self.root = root
        self.movie_app = movie_app

        # Set window title and dimensions
        self.root.title("Movie App")
        self.root.geometry("600x400")

        # Create and pack the listbox to display movies
        self.movie_listbox = tk.Listbox(self.root, height=15, width=50)
        self.movie_listbox.pack(pady=20)

        # Create a context menu (right-click menu)
        self.create_context_menu()

        # Populate the listbox with movies from the database
        self.populate_movie_list()

        # Bind right-click event for the context menu (Windows/Linux: Button-3, macOS: Button-2)
        self.movie_listbox.bind("<Button-3>", self.show_context_menu)
        self.movie_listbox.bind("<Button-2>", self.show_context_menu)  # For macOS right-click

        # Bind double-click event to open a movie in the browser
        self.movie_listbox.bind("<Double-1>", self.watch_movie)

    def create_context_menu(self):
        """
        Create the right-click context menu.
        
        This method ads various actions to the context menu, such as adding, deleting, 
        searching, and viewing movie statistics, as well as generating the movie website.
        """
        self.context_menu = Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="Add Movie", command=self.add_movie)
        self.context_menu.add_command(label="Delete Movie", command=self.delete_movie)
        self.context_menu.add_command(label="Show Stats", command=self.show_stats)
        self.context_menu.add_command(label="Search Movie", command=self.search_movie)
        self.context_menu.add_command(label="Update Website", command=self.generate_website)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="Exit", command=self.root.quit)

    def show_context_menu(self, event):
        """
        Show the context menu on right-click.
        
        This method is triggered when the user right-clicks on the movie list.
        It displays the context menu at the location of the mouse pointer.
        
        Args:
            event (tk.Event): The event generated by the right-click action.
        """
        print("Right-click detected")  # Debugging statement
        try:
            # Using 'post' instead of 'tk_popup' to ensure cross-platform compatibility
            self.context_menu.post(event.x_root, event.y_root)
        except Exception as e:
            print(f"Error showing context menu: {e}")

    def populate_movie_list(self):
        """
        Populate the listbox with movie titles from the database.
        
        This method fetches the list of movie titles from the MovieApp instance and
        populates the Tkinter listbox with these titles. It is called during initialization
        and whenever the movie list is updated.
        """
        self.movie_listbox.delete(0, tk.END)
        movies = self.movie_app.get_movie_list()
        for movie in movies:
            self.movie_listbox.insert(tk.END, movie)

    def add_movie(self):
        """
        Add new movie to the database and update the list.
        
        This method prompts the user for a movie tilte via dialog box, attempts to 
        add the movie to the database, and updates the listbox if successful. If the 
        movie could not be added, an error message is shown.
        """
        new_movie = simpledialog.askstring("Add Movie", "Enter movie name:")
        if new_movie:
            success = self.movie_app.add_movie(new_movie)
            if success:
                self.populate_movie_list()
            else:
                messagebox.showerror("Error", "Movie could not be added.")

    def delete_movie(self):
        """
        Delete a selected movie from the database and update the list.
        
        This method prompts the user to confirm the deletion of a selected movie. If confirmed, 
        the movie is deleted from the database and the listbox is updated.
        """
        selected_movie = self.movie_listbox.get(tk.ACTIVE)
        if selected_movie:
            confirm = messagebox.askyesno("Confirm Delete", f"Are you sure you want to delete '{selected_movie}'?")
            if confirm:
                self.movie_app.delete_movie(selected_movie)
                self.populate_movie_list()

    def show_stats(self):
        """
        Display movie statistics in a message box.
        
        This method fetches the movie statistics from the MovieApp instance and 
        displays them in a message box. The statistics may include information such as
        average ratings, best and worst movies, etc.
        """
        stats = self.movie_app.get_movie_stats()
        messagebox.showinfo("Movie Stats", stats)

    def search_movie(self):
       """
       Search for a movie and display the results.
       
       This method prompts the user for a movie title, searches for it in the database
       and displays the search results. If no matching movies are found, an appropriate 
       message is shown.
       """
    search_term = simpledialog.askstring("Search Movie", "Enter movie name:")
    if search_term:
        results = self.movie_app.search_movie(search_term)
        if results:
            result_str = "\n".join(results)
            messagebox.showinfo("Search Results", result_str)
        else:
            messagebox.showinfo("Search Results", "No movies found")

    def generate_website(self):
        """
        Generate the movie website.
        
        This method triggers the MovieApp instance to generate or update the website 
        that displays the list of movies. Once the website is updated, a message box
        is displayed to inform the user.
        """
        self.movie_app.generate_website()
        messagebox.showinfo("Website Generated", "The movie website has been updated.")

    def watch_movie(self, event):
        """
        Handle double-click on a movie to watch it.
        
        This method is triggered when the user double-clicks a movie in the listbox.
        It opens the default web browser to the streaming URL for the selected movie.
        
        Args:
            event (tk.Event): The event generated by the double-click action.
        """
        print("Double-click detected")  # Debugging statement
        selected = self.movie_listbox.curselection()
        if selected:
            movie_title = self.movie_listbox.get(selected)
            if movie_title:
                # Prepare the 123MoviesFree URL (ensure itâ€™s correctly formatted)
                streaming_url = f"https://ww4.123moviesfree.net/search/?q={movie_title.replace(' ', '+')}"
                print(f"Redirecting to: {streaming_url}")  # Debugging: see URL before opening
                webbrowser.open(streaming_url)

    @staticmethod
    def run_gui(movie_app):
        """
        Run the Tkinter-based Movie App GUI
        
        This static method initializes and runs the Tkinter GUI for the MovieApp.
        
        Args:
            movie_app (MovieApp): The MovieApp instance that provides the movie database.
        """
        root = tk.Tk()
        app_gui = MovieAppTkGui(root, movie_app)
        root.mainloop()
