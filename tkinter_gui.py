import tkinter as tk
from tkinter import messagebox, simpledialog, Menu
import webbrowser
import urllib.parse
import platform
from movie_app_api import MovieApp
import os
import logging  # Import logging
import matplotlib.pyplot as plt  # Import matplotlib for plotting


class MovieAppTkGui:
    """
    The Tkinter GUI class for the Movie App. It integrates with the MovieApp
    and provides a user interface for managing and viewing movies.
    """
    def __init__(self, root, movie_app):
        """
        Initialize the Tkinter GUI and integrate with the MovieApp.
        
        Args:
            root (tk.Tk): The main Tkinter window.
            movie_app (MovieApp): The instance of the MovieApp class that manages the movies.
        """
        self.root = root
        self.movie_app = movie_app

        # Set up logging
        logging.basicConfig(filename="movie_app.log", level=logging.INFO,
                            format="%(asctime)s - %(levelname)s - %(message)s")
        logging.info("MovieAppTkGui initialized.")

        # Set window title and dimensions
        self.root.title("Movie App")
        self.root.geometry("600x400")

        # Pagination variables
        self.items_per_page = 5
        self.current_page = 1

        # Create and pack the listbox to display movies
        self.movie_listbox = tk.Listbox(self.root, height=15, width=50)
        self.movie_listbox.pack(pady=20)

        # Create the frame for pagination
        self.pagination_frame = tk.Frame(self.root)
        self.pagination_frame.pack(pady=10)

        # Create a context menu (right-click menu)
        self.create_context_menu()

        # Populate the listbox with movies from the database
        self.populate_movie_list()

        # Bind right-click event for the context menu based on the platform
        if platform.system() == "Darwin":  # macOS
            self.movie_listbox.bind("<Button-2>", self.show_context_menu)
        else:  # Windows/Linux
            self.movie_listbox.bind("<Button-3>", self.show_context_menu)

        # Bind double-click event to open a movie in the browser
        self.movie_listbox.bind("<Double-1>", self.watch_movie)

    def create_context_menu(self):
        """
        Create the right-click context menu.
        
        This method adds various actions to the context menu, such as adding, deleting, 
        searching, and viewing movie statistics, as well as generating the movie website.
        """
        self.context_menu = Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="Add Movie", command=self.add_movie)
        self.context_menu.add_command(label="Delete Movie", command=self.delete_movie)
        self.context_menu.add_command(label="Show Stats", command=self.show_stats)
        self.context_menu.add_command(label="Search Movie", command=self.search_movie)
        self.context_menu.add_command(label="Update Website", command=self.generate_website)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="Exit", command=self.root.quit)

    def show_context_menu(self, event):
        """
        Show the context menu on right-click.
        
        This method is triggered when the user right-clicks on the movie list.
        It displays the context menu at the location of the mouse pointer.
        
        Args:
            event (tk.Event): The event generated by the right-click action.
        """
        try:
            self.context_menu.post(event.x_root, event.y_root)
        except Exception as e:
            logging.error(f"Error showing context menu: {e}")

    def populate_movie_list(self):
        """
        Populate the listbox with movie titles from the database.
        
        This method fetches the list of movie titles from the MovieApp instance and
        populates the Tkinter listbox with these titles. It is called during initialization
        and whenever the movie list is updated.
        """
        self.movie_listbox.delete(0, tk.END)
        start = (self.current_page - 1) * self.items_per_page
        movies = self.movie_app._storage.list_movies()[start:start + self.items_per_page]
        
        for movie in movies:
            self.movie_listbox.insert(tk.END, movie)

        # Call pagination button creator
        self.create_pagination_buttons()

        logging.info("Movie list populated with pagination.")

    def create_pagination_buttons(self):
        """
        Create the pagination buttons (Previous and Next) below the movie list.
        
        This method adds two buttons, "Previous" and "Next", which allow users to
        navigate through the movie list by pages.
        """
        for widget in self.pagination_frame.winfo_children():
            widget.destroy()  # Remove any existing buttons

        prev_button = tk.Button(self.pagination_frame, text="Previous", command=self.prev_page)
        prev_button.pack(side=tk.LEFT, padx=10)

        next_button = tk.Button(self.pagination_frame, text="Next", command=self.next_page)
        next_button.pack(side=tk.LEFT, padx=10)

    def prev_page(self):
        """
        Navigate to the previous page of movie results.
        
        This method decreases the current page number and updates the list of
        movies shown on the GUI to the previous set of results.
        """
        if self.current_page > 1:
            self.current_page -= 1
            self.populate_movie_list()
            logging.info(f"Moved to page {self.current_page}.")

    def next_page(self):
        """
        Navigate to the next page of movie results.
        
        This method increases the current page number and updates the list of
        movies shown on the GUI to the next set of results.
        """
        self.current_page += 1
        self.populate_movie_list()
        logging.info(f"Moved to page {self.current_page}.")

    def add_movie(self):
        """
        Add new movie to the database and update the list.
        
        This method prompts the user for a movie title via dialog box, attempts to 
        add the movie to the database, and updates the listbox if successful. If the
        movie is already present or an error occurs, it displays an error message.
        """
        movie_title = simpledialog.askstring("Add Movie", "Enter movie title:")
        if movie_title:
            if self.movie_app.add_movie(movie_title):
                messagebox.showinfo("Success", f"Movie '{movie_title}' added successfully!")
                self.populate_movie_list()  # Update the list after adding the movie
                logging.info(f"Movie '{movie_title}' added.")
            else:
                messagebox.showwarning("Failed", f"Movie '{movie_title}' already exists.")
                logging.warning(f"Failed to add movie '{movie_title}': already exists.")

    def delete_movie(self):
        """
        Delete the selected movie from the database and update the list.
        
        This method deletes the selected movie title from the database, displays a 
        success message, and updates the listbox. If no movie is selected, it shows
        a warning message.
        """
        selected_movie = self.movie_listbox.get(tk.ACTIVE)
        if selected_movie:
            if self.movie_app.delete_movie(selected_movie):
                messagebox.showinfo("Deleted", f"Movie '{selected_movie}' deleted successfully!")
                self.populate_movie_list()  # Update the list after deletion
                logging.info(f"Movie '{selected_movie}' deleted.")
            else:
                messagebox.showwarning("Failed", f"Could not delete movie '{selected_movie}'.")
                logging.error(f"Failed to delete movie '{selected_movie}'.")

    def show_stats(self):
        """
        Show the movie statistics in a plot.
        
        This method gathers movie statistics such as ratings or movie counts
        and generates a bar chart to display these statistics using matplotlib.
        """
        # Fetch movie statistics from the MovieApp
        movie_stats = self.movie_app.get_movie_statistics()

        # Plot the statistics using matplotlib
        plt.bar(movie_stats.keys(), movie_stats.values())
        plt.xlabel("Movie Titles")
        plt.ylabel("Statistics (Ratings or Count)")
        plt.title("Movie Statistics")
        plt.show()

        logging.info("Movie statistics displayed in a plot.")

    def search_movie(self):
        """
        Search for a movie from the list.
        
        This method prompts the user for a search query and filters the movie list
        based on the query, displaying matching movie titles in the listbox.
        """
        search_query = simpledialog.askstring("Search Movie", "Enter movie title to search:")
        if search_query:
            self.movie_listbox.delete(0, tk.END)
            movies = self.movie_app.search_movie(search_query)
            for movie in movies:
                self.movie_listbox.insert(tk.END, movie)
            logging.info(f"Searched for movie '{search_query}'.")

    def generate_website(self):
        """
        Generate a website for the movie database.
        
        This method generates a static website using the current movie list and saves
        it in an HTML file, allowing users to view the movie catalog online.
        """
        self.movie_app.generate_website()
        messagebox.showinfo("Website Generated", "The movie website has been successfully generated!")
        logging.info("Movie website generated.")

    def watch_movie(self, event):
        """
        Open the selected movie in a web browser for streaming.
        
        This method opens the movie's streaming page (on JustWatch) in the user's default
        web browser when the user double-clicks a movie title in the listbox.
        """
        selected_movie = self.movie_listbox.get(tk.ACTIVE)
        if selected_movie:
            streaming_url = f"https://justwatch.com/search?q={urllib.parse.quote_plus(selected_movie)}"
            webbrowser.open(streaming_url)
            logging.info(f"Movie '{selected_movie}' opened in the browser for streaming.")

    def run_gui(self):
        """
        Run the main Tkinter loop.
        
        This method starts the Tkinter event loop, which keeps the GUI running and responsive
        to user interactions.
        """
        self.root.mainloop()
